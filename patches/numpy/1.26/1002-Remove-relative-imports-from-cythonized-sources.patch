--- a/numpy/random/_generator.pyx
+++ b/numpy/random/_generator.pyx
@@ -21,7 +21,7 @@
 from ._bounded_integers cimport (_rand_bool, _rand_int32, _rand_int64,
          _rand_int16, _rand_int8, _rand_uint64, _rand_uint32, _rand_uint16,
          _rand_uint8, _gen_mask)
-from ._pcg64 import PCG64
+from numpy.random._pcg64 import PCG64
 from numpy.random cimport bitgen_t
 from ._common cimport (POISSON_LAM_MAX, CONS_POSITIVE, CONS_NONE,
             CONS_NON_NEGATIVE, CONS_BOUNDED_0_1, CONS_BOUNDED_GT_0_1,
@@ -222,7 +222,7 @@ def __setstate__(self, state):
     def __reduce__(self):
         ctor, name_tpl, state = self._bit_generator.__reduce__()
 
-        from ._pickle import __generator_ctor
+        from numpy.random._pickle import __generator_ctor
         # Requirements of __generator_ctor are (name, ctor)
         return __generator_ctor, (name_tpl[0], ctor), state
 
--- a/numpy/random/bit_generator.pyx
+++ b/numpy/random/bit_generator.pyx
@@ -541,7 +541,7 @@ def __setstate__(self, state):
         self.state = state
 
     def __reduce__(self):
-        from ._pickle import __bit_generator_ctor
+        from numpy.random._pickle import __bit_generator_ctor
         return __bit_generator_ctor, (self.state['bit_generator'],), self.state
 
     @property

--- a/numpy/random/mtrand.pyx
+++ b/numpy/random/mtrand.pyx
@@ -16,7 +16,7 @@
 from ._bounded_integers cimport (_rand_bool, _rand_int32, _rand_int64,
          _rand_int16, _rand_int8, _rand_uint64, _rand_uint32, _rand_uint16,
          _rand_uint8,)
-from ._mt19937 import MT19937 as _MT19937
+from numpy.random._mt19937 import MT19937 as _MT19937
 from numpy.random cimport bitgen_t
 from ._common cimport (POISSON_LAM_MAX, CONS_POSITIVE, CONS_NONE,
             CONS_NON_NEGATIVE, CONS_BOUNDED_0_1, CONS_BOUNDED_GT_0_1,
@@ -206,7 +206,7 @@ def __setstate__(self, state):
     def __reduce__(self):
         ctor, name_tpl, _ = self._bit_generator.__reduce__()
 
-        from ._pickle import __randomstate_ctor
+        from numpy.random._pickle import __randomstate_ctor
         return __randomstate_ctor, (name_tpl[0], ctor), self.get_state(legacy=False)
 
     cdef _initialize_bit_generator(self, bit_generator):
